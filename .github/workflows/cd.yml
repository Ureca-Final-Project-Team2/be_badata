name: CD - upload to EC2

on:
  push:
    branches:
      - main
      - develop

jobs:
  upload-to-ec2 :
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ secrets.DB_DATABASE_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 소스 코드 Checkout
        uses: actions/checkout@v4

      - name: Redis 실행
        uses: supercharge/redis-github-action@1.6.0

      - name: .env 설정
        run: |
          echo "SPRING_PROFILES_ACTIVE=ci" >> $GITHUB_ENV
          echo "DB_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> $GITHUB_ENV
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "JWT_VALIDATION_TIME=${{ secrets.JWT_VALIDATION_TIME }}" >> $GITHUB_ENV
          echo "SOCIAL_CLIENT_ID=${{ secrets.SOCIAL_CLIENT_ID }}" >> $GITHUB_ENV
          echo "SOCIAL_SECRET=${{ secrets.SOCIAL_SECRET }}" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 빌드 테스트
        run: ./gradlew clean build -x test

      - name: Docker Hub 로그인
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build 후 Docker image push
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/badata:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/badata:latest

      - name: EC2 배포
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu
            
            echo "기존 컨테이너 중지 및 제거"
            docker stop badata_be || true
            docker rm badata_be || true
            
            echo "새로운 이미지 빌드"
            docker pull ${{ secrets.DOCKER_USERNAME }}/badata:latest
            docker run --env-file ~/be_badata/.env -d -p 8080:8080 --name badata_be ${{ secrets.DOCKER_USERNAME }}/badata:latest
